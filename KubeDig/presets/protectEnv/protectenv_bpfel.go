// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package protectenv

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type protectenvBufsK struct {
	Path   [256]int8
	Source [256]int8
}

type protectenvBufsT struct{ Buf [32768]int8 }

// loadProtectenv returns the embedded CollectionSpec for protectenv.
func loadProtectenv() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_ProtectenvBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load protectenv: %w", err)
	}

	return spec, err
}

// loadProtectenvObjects loads protectenv and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*protectenvObjects
//	*protectenvPrograms
//	*protectenvMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadProtectenvObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadProtectenv()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// protectenvSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type protectenvSpecs struct {
	protectenvProgramSpecs
	protectenvMapSpecs
	protectenvVariableSpecs
}

// protectenvProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type protectenvProgramSpecs struct {
	EnforceFile *ebpf.ProgramSpec `ebpf:"enforce_file"`
}

// protectenvMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type protectenvMapSpecs struct {
	Bufk                       *ebpf.MapSpec `ebpf:"bufk"`
	Bufs                       *ebpf.MapSpec `ebpf:"bufs"`
	BufsOff                    *ebpf.MapSpec `ebpf:"bufs_off"`
	Events                     *ebpf.MapSpec `ebpf:"events"`
	KubedigAlertThrottle     *ebpf.MapSpec `ebpf:"kubedig_alert_throttle"`
	KubedigConfig            *ebpf.MapSpec `ebpf:"kubedig_config"`
	KubedigContainers        *ebpf.MapSpec `ebpf:"kubedig_containers"`
	KubedigEvents            *ebpf.MapSpec `ebpf:"kubedig_events"`
	ProtectenvPresetContainers *ebpf.MapSpec `ebpf:"protectenv_preset_containers"`
}

// protectenvVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type protectenvVariableSpecs struct {
	Unused *ebpf.VariableSpec `ebpf:"unused"`
}

// protectenvObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadProtectenvObjects or ebpf.CollectionSpec.LoadAndAssign.
type protectenvObjects struct {
	protectenvPrograms
	protectenvMaps
	protectenvVariables
}

func (o *protectenvObjects) Close() error {
	return _ProtectenvClose(
		&o.protectenvPrograms,
		&o.protectenvMaps,
	)
}

// protectenvMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadProtectenvObjects or ebpf.CollectionSpec.LoadAndAssign.
type protectenvMaps struct {
	Bufk                       *ebpf.Map `ebpf:"bufk"`
	Bufs                       *ebpf.Map `ebpf:"bufs"`
	BufsOff                    *ebpf.Map `ebpf:"bufs_off"`
	Events                     *ebpf.Map `ebpf:"events"`
	KubedigAlertThrottle     *ebpf.Map `ebpf:"kubedig_alert_throttle"`
	KubedigConfig            *ebpf.Map `ebpf:"kubedig_config"`
	KubedigContainers        *ebpf.Map `ebpf:"kubedig_containers"`
	KubedigEvents            *ebpf.Map `ebpf:"kubedig_events"`
	ProtectenvPresetContainers *ebpf.Map `ebpf:"protectenv_preset_containers"`
}

func (m *protectenvMaps) Close() error {
	return _ProtectenvClose(
		m.Bufk,
		m.Bufs,
		m.BufsOff,
		m.Events,
		m.KubedigAlertThrottle,
		m.KubedigConfig,
		m.KubedigContainers,
		m.KubedigEvents,
		m.ProtectenvPresetContainers,
	)
}

// protectenvVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadProtectenvObjects or ebpf.CollectionSpec.LoadAndAssign.
type protectenvVariables struct {
	Unused *ebpf.Variable `ebpf:"unused"`
}

// protectenvPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadProtectenvObjects or ebpf.CollectionSpec.LoadAndAssign.
type protectenvPrograms struct {
	EnforceFile *ebpf.Program `ebpf:"enforce_file"`
}

func (p *protectenvPrograms) Close() error {
	return _ProtectenvClose(
		p.EnforceFile,
	)
}

func _ProtectenvClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed protectenv_bpfel.o
var _ProtectenvBytes []byte
