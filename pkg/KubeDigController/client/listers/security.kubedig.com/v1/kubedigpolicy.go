// SPDX-License-Identifier: Apache-2.0
// Copyright 2022 Authors of KubeDig

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/zfz-725/KubeDig/pkg/KubeDigController/api/security.kubedig.com/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// KubeDigPolicyLister helps list KubeDigPolicies.
// All objects returned here must be treated as read-only.
type KubeDigPolicyLister interface {
	// List lists all KubeDigPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.KubeDigPolicy, err error)
	// KubeDigPolicies returns an object that can list and get KubeDigPolicies.
	KubeDigPolicies(namespace string) KubeDigPolicyNamespaceLister
	KubeDigPolicyListerExpansion
}

// kubeDigPolicyLister implements the KubeDigPolicyLister interface.
type kubeDigPolicyLister struct {
	indexer cache.Indexer
}

// NewKubeDigPolicyLister returns a new KubeDigPolicyLister.
func NewKubeDigPolicyLister(indexer cache.Indexer) KubeDigPolicyLister {
	return &kubeDigPolicyLister{indexer: indexer}
}

// List lists all KubeDigPolicies in the indexer.
func (s *kubeDigPolicyLister) List(selector labels.Selector) (ret []*v1.KubeDigPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.KubeDigPolicy))
	})
	return ret, err
}

// KubeDigPolicies returns an object that can list and get KubeDigPolicies.
func (s *kubeDigPolicyLister) KubeDigPolicies(namespace string) KubeDigPolicyNamespaceLister {
	return kubeDigPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// KubeDigPolicyNamespaceLister helps list and get KubeDigPolicies.
// All objects returned here must be treated as read-only.
type KubeDigPolicyNamespaceLister interface {
	// List lists all KubeDigPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.KubeDigPolicy, err error)
	// Get retrieves the KubeDigPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.KubeDigPolicy, error)
	KubeDigPolicyNamespaceListerExpansion
}

// kubeDigPolicyNamespaceLister implements the KubeDigPolicyNamespaceLister
// interface.
type kubeDigPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all KubeDigPolicies in the indexer for a given namespace.
func (s kubeDigPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1.KubeDigPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.KubeDigPolicy))
	})
	return ret, err
}

// Get retrieves the KubeDigPolicy from the indexer for a given namespace and name.
func (s kubeDigPolicyNamespaceLister) Get(name string) (*v1.KubeDigPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("kubedigpolicy"), name)
	}
	return obj.(*v1.KubeDigPolicy), nil
}
