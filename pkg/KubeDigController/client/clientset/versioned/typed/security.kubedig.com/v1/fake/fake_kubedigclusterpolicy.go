// SPDX-License-Identifier: Apache-2.0
// Copyright 2022 Authors of KubeDig

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	securitykubedigcomv1 "github.com/zfz-725/KubeDig/pkg/KubeDigController/api/security.kubedig.com/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeKubeDigClusterPolicies implements KubeDigClusterPolicyInterface
type FakeKubeDigClusterPolicies struct {
	Fake *FakeSecurityV1
}

var kubedigclusterpoliciesResource = schema.GroupVersionResource{Group: "security.kubedig.com", Version: "v1", Resource: "kubedigclusterpolicies"}

var kubedigclusterpoliciesKind = schema.GroupVersionKind{Group: "security.kubedig.com", Version: "v1", Kind: "KubeDigClusterPolicy"}

// Get takes name of the kubeDigClusterPolicy, and returns the corresponding kubeDigClusterPolicy object, and an error if there is any.
func (c *FakeKubeDigClusterPolicies) Get(ctx context.Context, name string, options v1.GetOptions) (result *securitykubedigcomv1.KubeDigClusterPolicy, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(kubedigclusterpoliciesResource, name), &securitykubedigcomv1.KubeDigClusterPolicy{})
	if obj == nil {
		return nil, err
	}
	return obj.(*securitykubedigcomv1.KubeDigClusterPolicy), err
}

// List takes label and field selectors, and returns the list of KubeDigClusterPolicies that match those selectors.
func (c *FakeKubeDigClusterPolicies) List(ctx context.Context, opts v1.ListOptions) (result *securitykubedigcomv1.KubeDigClusterPolicyList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(kubedigclusterpoliciesResource, kubedigclusterpoliciesKind, opts), &securitykubedigcomv1.KubeDigClusterPolicyList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &securitykubedigcomv1.KubeDigClusterPolicyList{ListMeta: obj.(*securitykubedigcomv1.KubeDigClusterPolicyList).ListMeta}
	for _, item := range obj.(*securitykubedigcomv1.KubeDigClusterPolicyList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested kubeDigClusterPolicies.
func (c *FakeKubeDigClusterPolicies) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(kubedigclusterpoliciesResource, opts))
}

// Create takes the representation of a kubeDigClusterPolicy and creates it.  Returns the server's representation of the kubeDigClusterPolicy, and an error, if there is any.
func (c *FakeKubeDigClusterPolicies) Create(ctx context.Context, kubeDigClusterPolicy *securitykubedigcomv1.KubeDigClusterPolicy, opts v1.CreateOptions) (result *securitykubedigcomv1.KubeDigClusterPolicy, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(kubedigclusterpoliciesResource, kubeDigClusterPolicy), &securitykubedigcomv1.KubeDigClusterPolicy{})
	if obj == nil {
		return nil, err
	}
	return obj.(*securitykubedigcomv1.KubeDigClusterPolicy), err
}

// Update takes the representation of a kubeDigClusterPolicy and updates it. Returns the server's representation of the kubeDigClusterPolicy, and an error, if there is any.
func (c *FakeKubeDigClusterPolicies) Update(ctx context.Context, kubeDigClusterPolicy *securitykubedigcomv1.KubeDigClusterPolicy, opts v1.UpdateOptions) (result *securitykubedigcomv1.KubeDigClusterPolicy, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(kubedigclusterpoliciesResource, kubeDigClusterPolicy), &securitykubedigcomv1.KubeDigClusterPolicy{})
	if obj == nil {
		return nil, err
	}
	return obj.(*securitykubedigcomv1.KubeDigClusterPolicy), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeKubeDigClusterPolicies) UpdateStatus(ctx context.Context, kubeDigClusterPolicy *securitykubedigcomv1.KubeDigClusterPolicy, opts v1.UpdateOptions) (*securitykubedigcomv1.KubeDigClusterPolicy, error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateSubresourceAction(kubedigclusterpoliciesResource, "status", kubeDigClusterPolicy), &securitykubedigcomv1.KubeDigClusterPolicy{})
	if obj == nil {
		return nil, err
	}
	return obj.(*securitykubedigcomv1.KubeDigClusterPolicy), err
}

// Delete takes name of the kubeDigClusterPolicy and deletes it. Returns an error if one occurs.
func (c *FakeKubeDigClusterPolicies) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteAction(kubedigclusterpoliciesResource, name), &securitykubedigcomv1.KubeDigClusterPolicy{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeKubeDigClusterPolicies) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(kubedigclusterpoliciesResource, listOpts)

	_, err := c.Fake.Invokes(action, &securitykubedigcomv1.KubeDigClusterPolicyList{})
	return err
}

// Patch applies the patch and returns the patched kubeDigClusterPolicy.
func (c *FakeKubeDigClusterPolicies) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *securitykubedigcomv1.KubeDigClusterPolicy, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(kubedigclusterpoliciesResource, name, pt, data, subresources...), &securitykubedigcomv1.KubeDigClusterPolicy{})
	if obj == nil {
		return nil, err
	}
	return obj.(*securitykubedigcomv1.KubeDigClusterPolicy), err
}
