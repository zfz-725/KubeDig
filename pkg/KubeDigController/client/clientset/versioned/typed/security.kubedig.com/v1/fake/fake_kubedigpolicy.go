// SPDX-License-Identifier: Apache-2.0
// Copyright 2022 Authors of KubeDig

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	securitykubedigcomv1 "github.com/zfz-725/KubeDig/pkg/KubeDigController/api/security.kubedig.com/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeKubeDigPolicies implements KubeDigPolicyInterface
type FakeKubeDigPolicies struct {
	Fake *FakeSecurityV1
	ns   string
}

var kubedigpoliciesResource = schema.GroupVersionResource{Group: "security.kubedig.com", Version: "v1", Resource: "kubedigpolicies"}

var kubedigpoliciesKind = schema.GroupVersionKind{Group: "security.kubedig.com", Version: "v1", Kind: "KubeDigPolicy"}

// Get takes name of the kubeDigPolicy, and returns the corresponding kubeDigPolicy object, and an error if there is any.
func (c *FakeKubeDigPolicies) Get(ctx context.Context, name string, options v1.GetOptions) (result *securitykubedigcomv1.KubeDigPolicy, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(kubedigpoliciesResource, c.ns, name), &securitykubedigcomv1.KubeDigPolicy{})

	if obj == nil {
		return nil, err
	}
	return obj.(*securitykubedigcomv1.KubeDigPolicy), err
}

// List takes label and field selectors, and returns the list of KubeDigPolicies that match those selectors.
func (c *FakeKubeDigPolicies) List(ctx context.Context, opts v1.ListOptions) (result *securitykubedigcomv1.KubeDigPolicyList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(kubedigpoliciesResource, kubedigpoliciesKind, c.ns, opts), &securitykubedigcomv1.KubeDigPolicyList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &securitykubedigcomv1.KubeDigPolicyList{ListMeta: obj.(*securitykubedigcomv1.KubeDigPolicyList).ListMeta}
	for _, item := range obj.(*securitykubedigcomv1.KubeDigPolicyList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested kubeDigPolicies.
func (c *FakeKubeDigPolicies) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(kubedigpoliciesResource, c.ns, opts))

}

// Create takes the representation of a kubeDigPolicy and creates it.  Returns the server's representation of the kubeDigPolicy, and an error, if there is any.
func (c *FakeKubeDigPolicies) Create(ctx context.Context, kubeDigPolicy *securitykubedigcomv1.KubeDigPolicy, opts v1.CreateOptions) (result *securitykubedigcomv1.KubeDigPolicy, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(kubedigpoliciesResource, c.ns, kubeDigPolicy), &securitykubedigcomv1.KubeDigPolicy{})

	if obj == nil {
		return nil, err
	}
	return obj.(*securitykubedigcomv1.KubeDigPolicy), err
}

// Update takes the representation of a kubeDigPolicy and updates it. Returns the server's representation of the kubeDigPolicy, and an error, if there is any.
func (c *FakeKubeDigPolicies) Update(ctx context.Context, kubeDigPolicy *securitykubedigcomv1.KubeDigPolicy, opts v1.UpdateOptions) (result *securitykubedigcomv1.KubeDigPolicy, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(kubedigpoliciesResource, c.ns, kubeDigPolicy), &securitykubedigcomv1.KubeDigPolicy{})

	if obj == nil {
		return nil, err
	}
	return obj.(*securitykubedigcomv1.KubeDigPolicy), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeKubeDigPolicies) UpdateStatus(ctx context.Context, kubeDigPolicy *securitykubedigcomv1.KubeDigPolicy, opts v1.UpdateOptions) (*securitykubedigcomv1.KubeDigPolicy, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(kubedigpoliciesResource, "status", c.ns, kubeDigPolicy), &securitykubedigcomv1.KubeDigPolicy{})

	if obj == nil {
		return nil, err
	}
	return obj.(*securitykubedigcomv1.KubeDigPolicy), err
}

// Delete takes name of the kubeDigPolicy and deletes it. Returns an error if one occurs.
func (c *FakeKubeDigPolicies) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(kubedigpoliciesResource, c.ns, name), &securitykubedigcomv1.KubeDigPolicy{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeKubeDigPolicies) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(kubedigpoliciesResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &securitykubedigcomv1.KubeDigPolicyList{})
	return err
}

// Patch applies the patch and returns the patched kubeDigPolicy.
func (c *FakeKubeDigPolicies) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *securitykubedigcomv1.KubeDigPolicy, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(kubedigpoliciesResource, c.ns, name, pt, data, subresources...), &securitykubedigcomv1.KubeDigPolicy{})

	if obj == nil {
		return nil, err
	}
	return obj.(*securitykubedigcomv1.KubeDigPolicy), err
}
