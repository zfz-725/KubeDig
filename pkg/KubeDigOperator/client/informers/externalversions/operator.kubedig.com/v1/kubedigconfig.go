// SPDX-License-Identifier: Apache-2.0
// Copyright 2023 Authors of KubeDig

// Code generated by informer-gen. DO NOT EDIT.

package v1

import (
	"context"
	time "time"

	operatorkubedigcomv1 "github.com/zfz-725/KubeDig/pkg/KubeDigOperator/api/operator.kubedig.com/v1"
	versioned "github.com/zfz-725/KubeDig/pkg/KubeDigOperator/client/clientset/versioned"
	internalinterfaces "github.com/zfz-725/KubeDig/pkg/KubeDigOperator/client/informers/externalversions/internalinterfaces"
	v1 "github.com/zfz-725/KubeDig/pkg/KubeDigOperator/client/listers/operator.kubedig.com/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// KubeDigConfigInformer provides access to a shared informer and lister for
// KubeDigConfigs.
type KubeDigConfigInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1.KubeDigConfigLister
}

type kubeDigConfigInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	namespace        string
}

// NewKubeDigConfigInformer constructs a new informer for KubeDigConfig type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewKubeDigConfigInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredKubeDigConfigInformer(client, namespace, resyncPeriod, indexers, nil)
}

// NewFilteredKubeDigConfigInformer constructs a new informer for KubeDigConfig type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredKubeDigConfigInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.OperatorV1().KubeDigConfigs(namespace).List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.OperatorV1().KubeDigConfigs(namespace).Watch(context.TODO(), options)
			},
		},
		&operatorkubedigcomv1.KubeDigConfig{},
		resyncPeriod,
		indexers,
	)
}

func (f *kubeDigConfigInformer) defaultInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredKubeDigConfigInformer(client, f.namespace, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *kubeDigConfigInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&operatorkubedigcomv1.KubeDigConfig{}, f.defaultInformer)
}

func (f *kubeDigConfigInformer) Lister() v1.KubeDigConfigLister {
	return v1.NewKubeDigConfigLister(f.Informer().GetIndexer())
}
